<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>bundleUUID</key>
	<string>4675A940-6227-11D9-BFB1-000D93589AF6</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
line = STDIN.read
$tab = (ENV['TM_SOFT_TABS'] == "NO" ? "\t" : " "*ENV['TM_TAB_SIZE'].to_i )
def join_code s
  # transform // comments to /* */ comments while leaving strings intact
  s.gsub!(/((['"])(?:\\.|.)*?\2)|\/\*.*?\*\/|\/\/([^\n\r]*)/m) do |line| 
      if $3
        '/*' + $3.gsub(/\*\//, '') + '*/'
      else
        line
      end
    end
  print s.split("\n").map {|line| line.strip}.join(" ")
end

def print_line(line, indent, for_ticker)
  s = ""
  s = "\n" if for_ticker == 0
  s + $tab*indent + line # the space should be replaced with soft or hard tab
end

def split_code s
  res = []
  indent = 0
  for_ticker = 1
  # this regexp should not have a capture depth deeper than 1
  # yes that does rule out backrefs :(
  s.split(/([\{\}\;]|"(?:\\.|.)*?"|'(?:\\.|.)*?'|\/\*.*?\*\/|\/\/[^\n\r]*)/).map do |l|
    l = l.strip
    case l
    when /^for\s*\(/
      res &lt;&lt; print_line(l, indent, for_ticker)
      for_ticker = 5
    when "{"
      s = print_line(l, indent, for_ticker)
	 for_ticker -= 1 unless for_ticker == 0
      indent += 1
	  s += print_line("", indent, for_ticker)
      res &lt;&lt; s
    when "}"
      indent -= 1
      res &lt;&lt; print_line(l, indent, for_ticker)
      res &lt;&lt; print_line("", indent, for_ticker)
    when ";"
      res &lt;&lt; l
      if for_ticker == 0
        res &lt;&lt; print_line("", indent, for_ticker)
      else
        res &lt;&lt; " "
      end
    when /^\s*$/
	 for_ticker += 1 # if empty string maintain the status-quo
    else
      res &lt;&lt; l
    end
    for_ticker -= 1 unless for_ticker == 0
  end

require "enumerator"
out = []
res.each_cons(2) do |a,b|
   # remove empty lines inserted when ; is followed by { or }
	out &lt;&lt; a unless a.match(/^\n\s*$/) &amp;&amp; b.match(/^\n\s*(\}|\{)\s*$/)
end
print out.join
end

if line.count("\n") &gt; 1
	join_code(line)
else
	split_code(line)
end

#k = "- (id)showSomeWindow 
#  {
#     for(int i =0;i&lt;a;i++)
#     {
#       \" boras /* */ //\"
#       // hello /* */   
#       if(a)
#         [ window makeKeyAndOrderFront:self];
#       }
#     }"
#join_code(k)
#l = "- (id)showSomeWindow { for(int i =0;i&lt;a;i++) { \" boras /* */ //\" /* hello /*    */ if(a) [ window makeKeyAndOrderFront:self]; } }"
#split_code(l)</string>
	<key>fallbackInput</key>
	<string>scope</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^{</string>
	<key>name</key>
	<string>Fold/Unfold Code</string>
	<key>output</key>
	<string>replaceSelectedText</string>
	<key>scope</key>
	<string>meta.block.c</string>
	<key>uuid</key>
	<string>3D221F96-F4CC-432D-9A04-F9F4DF3E0F55</string>
</dict>
</plist>
